basePath: /
definitions:
  admin_app.AddPageRequest:
    properties:
      content:
        type: string
      link:
        type: string
      title:
        type: string
    type: object
  admin_app.AddPostRequest:
    properties:
      content:
        description: |-
          Content of the post
          in: body
        type: string
      excerpt:
        description: |-
          Excerpt of the post
          in: body
        type: string
      title:
        description: |-
          Title of the post
          in: body
          required: true
        type: string
    type: object
  admin_app.ChangePostRequest:
    properties:
      content:
        description: |-
          Content of the post
          in: body
        type: string
      excerpt:
        description: |-
          Excerpt of the post
          in: body
        type: string
      id:
        description: |-
          ID of the post
          in: body
          required: true
        type: integer
      title:
        description: |-
          Title of the post
          in: body
        type: string
    type: object
  admin_app.GetPostResponse:
    properties:
      content:
        type: string
      excerpt:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  admin_app.ImageIdResponse:
    properties:
      id:
        type: string
    type: object
  admin_app.PageResponse:
    properties:
      id:
        type: integer
      link:
        type: string
    type: object
  admin_app.PostIdResponse:
    properties:
      id:
        type: integer
    type: object
  common.ErrorResponse:
    properties:
      error:
        type: string
      msg:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: email@email.com
    name: MatheusGomes
  description: This is the admin API for the Urchin app.
  license:
    name: MIT
  title: Urchin Admin API
  version: 1.0.0
paths:
  /images:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image file, saves it, and creates minified versions.
      parameters:
      - description: The image file to upload
        in: formData
        name: file
        required: true
        type: file
      - description: A brief description of the image
        in: formData
        name: excerpt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.ImageIdResponse'
        "400":
          description: Invalid input, file type, or size
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Server error while saving file
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Upload a new image
      tags:
      - images
  /images/{name}:
    delete:
      consumes:
      - application/json
      description: Deletes an image file from the server by its filename.
      parameters:
      - description: Image filename to delete
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.ImageIdResponse'
        "400":
          description: Invalid or missing filename
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Delete an image
      tags:
      - images
  /pages:
    post:
      consumes:
      - application/json
      description: Adds a new page to the database.
      parameters:
      - description: Page to add
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/admin_app.AddPageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.PageResponse'
        "400":
          description: Invalid request body or data
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Add a new page
      tags:
      - pages
  /posts:
    post:
      consumes:
      - application/json
      description: Adds a new post to the database.
      parameters:
      - description: Post to add
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/admin_app.AddPostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.PostIdResponse'
        "400":
          description: Invalid request body or missing data
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Add a new post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Updates an existing post with new data.
      parameters:
      - description: Post data to update
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/admin_app.ChangePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.PostIdResponse'
        "400":
          description: Invalid request body or could not change post
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Update an existing post
      tags:
      - posts
  /posts/{id}:
    delete:
      description: Deletes a post by its ID.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.PostIdResponse'
        "400":
          description: Invalid ID provided
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Delete a post
      tags:
      - posts
    get:
      description: Retrieves a post based on its ID.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/admin_app.GetPostResponse'
        "400":
          description: Invalid ID or post not found
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Get a post by ID
      tags:
      - posts
schemes:
- http
swagger: "2.0"
